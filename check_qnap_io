#!/usr/bin/env python3
"""check_qnap_io

Script checks QNAP disk IO.
Information is retrieved via SNMPv3 using pysnmp library.
"""

import argparse

from pysnmp.hlapi import ObjectIdentity, ObjectType

from logicworks_monitoring_lib import (
    add_common_snmp_args,
    add_table_to_dataset,
    check_snmp_args,
    get_snmp_table_data,
    report,
    unknown_exit,
)

SERVICE = "QNAP IO"


def add_performace_data(config, dataset):
    """Add perfdata to message string"""
    message = " |"
    for device in dataset:
        message += f" 'blv {device['blvID']} iops'" f"={device['iops']};;;;"
        message += f" 'blv {device['blvID']} latency'" f"={device['latency']};;;;"

    return message


def generate_output(config, dataset):
    """Prepare message string and exit code"""
    state = "OK"
    message = ""

    message = f"{SERVICE} {state}" + message + add_performace_data(config, dataset)
    return state, message


def main():
    """Parse args and execute script logic"""
    parser = argparse.ArgumentParser(
        description=__doc__, formatter_class=argparse.RawDescriptionHelpFormatter
    )
    add_common_snmp_args(parser)

    config = vars(parser.parse_args())
    check_snmp_args(config)

    dataset = []

    device_name = ObjectType(ObjectIdentity("NAS-MIB", "blvID"))
    iops = ObjectType(ObjectIdentity("NAS-MIB", "iops"))
    latency = ObjectType(ObjectIdentity("NAS-MIB", "latency"))

    try:
        raw_data = get_snmp_table_data(
            config,
            device_name,
            iops,
            latency,
        )
    except ValueError as err:
        unknown_exit(SERVICE, err)

    add_table_to_dataset(dataset, raw_data)

    state, message = generate_output(config, dataset)
    report(state, message)


if __name__ == "__main__":
    main()
