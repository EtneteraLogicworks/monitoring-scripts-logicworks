#!/usr/bin/env python3
"""check_unifi_updates

Script checks if UniFi CloudKey device firmware is up to date.
Installed firmware version is retrieved from info.php via HTTP.
Latest available firmware version is retrieved via ubnt.com API (See UNIFI_RELEASES_URL)
"""

import argparse
import re

import paramiko
import requests
from urllib3.exceptions import InsecureRequestWarning

from logicworks_monitoring_lib import report, unknown_exit

# We don't want any warnings in Icinga plugin output.
requests.packages.urllib3.disable_warnings(category=InsecureRequestWarning)


SERVICE = "UNIFI UPDATE"
UNIFI_RELEASES_URL = "https://fw-update.ubnt.com/api/firmware-latest"
UNIFI_IDENTIFIERS = {
    "UC-CK": "UCK",
    "UCK-G2": "UCKG2",
    "UCK-G2-PLUS": "UCKP",
}
VERIFY_CK_CERT = False


def establish_ssh_connection(config):
    ssh_client = paramiko.SSHClient()
    ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy)
    ssh_client.load_system_host_keys()
    ssh_client.connect(
        config["host"], username=config["ssh_username"], password=config["ssh_password"]
    )
    return ssh_client


def ssh_file_to_string(remote_file):
    """Read file contents via SFTP"""
    filestring = ""
    try:
        for line in remote_file:
            filestring += line
    finally:
        remote_file.close()
    return filestring


def fetch_cloudkey_ssh_info(config):
    """Retrieve CloudKey softare version via SSH"""
    cloudkey_info = {"systems": []}
    ssh_client = establish_ssh_connection(config)
    sftp_client = ssh_client.open_sftp()
    raw_ck_firmware = ssh_file_to_string(sftp_client.open("/usr/lib/version"))
    raw_controller_firmware = ssh_file_to_string(
        sftp_client.open("/usr/lib/unifi/webapps/ROOT/app-unifi/.version")
    )
    cloudkey_info["model"] = re.search("^([^.]*)", raw_ck_firmware).group(1)
    cloudkey_info["version_installed"] = re.search(
        "v([0-9]+[.][0-9]+[.][0-9]+)", raw_ck_firmware
    ).group(1)
    cloudkey_info["systems"].append({})
    cloudkey_info["systems"][-1]["id"] = "unifi"
    cloudkey_info["systems"][-1]["version_installed"] = re.search(
        "^([0-9]+[.][0-9]+[.][0-9]+)", raw_controller_firmware
    ).group(1)

    return cloudkey_info


def parse_cloudkey_web_info(raw_cloudkey_info):
    """Parse data from Cloud Key"""
    cloudkey_info = {"systems": []}
    for system in raw_cloudkey_info["data"][0]["systems"]:
        if system["installed"] and system["id"] in ["unifi"]:
            cloudkey_info["systems"].append({})
            cloudkey_info["systems"][-1]["id"] = system["id"]
            cloudkey_info["systems"][-1]["version_installed"] = re.search(
                "^([0-9]+[.][0-9]+[.][0-9]+)", system["version"]
            ).group(1)
    raw_version = raw_cloudkey_info["data"][0]["version"]
    cloudkey_info["model"] = re.search("^(.+?)[.]", raw_version).group(1)
    cloudkey_info["version_installed"] = re.search(
        "v([0-9]+[.][0-9]+[.][0-9]+)", raw_version
    ).group(1)
    return cloudkey_info


def fetch_cloudkey_web_info(config):
    """Download version info from Cloud Key info.php"""
    cloudkey_info_url = f"http://{config['host']}/info.php"
    try:
        web_req = requests.get(cloudkey_info_url, verify=VERIFY_CK_CERT)
        raw_cloudkey_info = web_req.json()
    except (requests.exceptions.RequestException, ValueError) as err:
        unknown_exit(SERVICE, err)
    cloudkey_info = parse_cloudkey_web_info(raw_cloudkey_info)
    return cloudkey_info


def fetch_latest_versions():
    """Obtain latest available firmware versions from the UBNT API"""
    try:
        api_req = requests.get(UNIFI_RELEASES_URL)
        list_of_devices = api_req.json()["_embedded"]["firmware"]
    except (requests.exceptions.RequestException, ValueError) as err:
        unknown_exit(SERVICE, err)
    return list_of_devices


def get_device_item(list_of_devices, platform, product="unifi-firmware"):
    """Get specific device from list of Unifi devices"""
    device_item = next(
        (
            device
            for device in list_of_devices
            if device["channel"] == "release"
            and device["platform"] == platform
            and device["product"] == product
        ),
        None,
    )
    if device_item is None:
        unknown_exit(
            SERVICE, f"Unable to find updates for platform {platform} product {product}"
        )
    return device_item


def get_all_latest_versions(cloudkey_info):
    """Obtain all latest software version and prepare data structure"""
    list_of_devices = fetch_latest_versions()
    cloud_key = get_device_item(list_of_devices, cloudkey_info["model"])
    cloudkey_info["latest_version"] = re.search(
        "^v([0-9]+[.][0-9]+[.][0-9]+)", cloud_key["version"]
    ).group(1)
    for system in cloudkey_info["systems"]:
        if system["id"] == "unifi":
            system_info = get_device_item(
                list_of_devices, platform="debian", product="unifi-controller"
            )
            system["latest_version"] = re.search(
                "^v([0-9]+[.][0-9]+[.][0-9]+)", system_info["version"]
            ).group(1)


def compare_versions(product, installed, latest, output_data):
    """Compare product current version with the latest and report"""
    if installed != latest:
        output_data["state"] = "WARNING"
        output_data["message_warning"] += (
            f" {product} version {installed} "
            f"differs from the latest available {latest}."
        )
    else:
        output_data["message_ok"] += f" {product} {installed} is current"


def generate_output(cloudkey_info):
    """Prepare message string and exit code"""
    output_data = {
        "state": "OK",
        "message_warning": "",
        "message_ok": "",
    }
    compare_versions(
        "Cloud Key firmware",
        cloudkey_info["version_installed"],
        cloudkey_info["latest_version"],
        output_data,
    )

    for system in cloudkey_info["systems"]:
        if system["id"] == "unifi":
            system_name = "UniFi controller"
        compare_versions(
            system_name,
            system["version_installed"],
            system["latest_version"],
            output_data,
        )

    message = (
        SERVICE
        + f" {output_data['state']} -"
        + output_data["message_warning"]
        + output_data["message_ok"]
    )
    return output_data["state"], message


def main():
    """Parse args and execute script logic"""
    parser = argparse.ArgumentParser(
        description=__doc__, formatter_class=argparse.RawDescriptionHelpFormatter
    )

    parser.add_argument(
        "-H", "--host", required=True, help="Name or IPv4 address of host to check"
    )
    parser.add_argument(
        "-s",
        "--ssh",
        action="store_true",
        default=False,
        help="Enable SSH mode for GenV2 firmware",
    )
    parser.add_argument("-u", "--ssh-username", help="Username for SSH connection")
    parser.add_argument("-p", "--ssh-password", help="Password for SSH connection")
    config = vars(parser.parse_args())
    if config["ssh"]:
        cloudkey_info = fetch_cloudkey_ssh_info(config)
    else:
        cloudkey_info = fetch_cloudkey_web_info(config)

    get_all_latest_versions(cloudkey_info)
    state, message = generate_output(cloudkey_info)
    report(state, message)


if __name__ == "__main__":
    main()
