#!/usr/bin/env python3
"""check_unifi_updates

Script checks if UBNT device firmware is up to date.
Installed firmware version is retrieved via SNMPv3 using pysnmp library.
Latest available firmware version is retrieved via ubnt.com API (See UNIFI_RELEASES_URL)
"""

import argparse
import re

import requests
from pysnmp.hlapi import ObjectIdentity, ObjectType

from logicworks_monitoring_lib import (
    add_common_snmp_args,
    check_snmp_args,
    get_snmp_oids,
    report,
    unknown_exit,
)

SERVICE = "UBNT UPDATE"

UNIFI_RELEASES_URL = "https://fw-update.ubnt.com/api/firmware-latest"
UNIFI_IDENTIFIERS = {
    "UAP-AC-EDU": "U7PG2",
    "UAP–AC–IW": "U7PG2",
    "UAP–AC–IW–PRO": "U7PG2",
    "UAP-AC-LITE": "U7PG2",
    "UAP-AC-LR": "U7PG2",
    "UAP-AC-M": "U7PG2",
    "UAP-AC-M-PRO": "U7PG2",
    "UAP-AC-PRO": "U7PG2",
    "UAP-AC-PRO-GEN2": "U7PG2",
    "UA-FLEXHD": "U7NHD",
    "UAP-BEACONHD": "U7NHD",
    "UAP-IW-HD": "U7NHD",
    "UAP-NANOHD": "U7NHD",
    "UAP-IW": "U2IW",
    "UAP-OUTDOOR+": "U2HSR",
    "UAP-HD": "U7HD",
    "UAP-SHD": "U7HD",
    "UAP‑XG": "U7HD",
    "UWB‑XG": "U7HD",
    "UWB‑XG‑BK": "U7HD",
    "UAP": "BZ2",
    "UAP-LR": "BZ2",
    "UAP-OUTDOOR": "BZ2",
    "UAP-OUTDOOR5": "BZ2",
    "UAP-V2": "U2SV2",
    "UAP-LR-V2": "U2SV2",
    "UAP-PRO": "U7P",
}


def normalize_ubnt_version(raw_version):
    """Strip unwanted characters from the retrieved version"""
    version_string = re.sub("[a-zA-Z]", "", raw_version)
    version_string = version_string.replace("+", ".")
    return version_string


def fetch_latest_ubnt_version(unifi_model):
    """Obtain latest available firmware version for the device from the UBNT API"""
    try:
        req = requests.get(UNIFI_RELEASES_URL)
        list_of_devices = req.json()["_embedded"]["firmware"]
    except (requests.exceptions.RequestException, ValueError) as err:
        unknown_exit(SERVICE, err)

    my_device = UNIFI_IDENTIFIERS.get(unifi_model.upper(), unifi_model.upper())

    device_item = next(
        (
            device
            for device in list_of_devices
            if device["channel"] == "release" and device["platform"] == my_device
        ),
        None,
    )
    if device_item is None:
        unknown_exit(SERVICE, f"Unable to find updates for device: {unifi_model}")
    return device_item["version"]


def generate_ubnt_update_output(config, installed_version, normalized_current_version):
    """Prepare message string and exit code"""
    if installed_version == normalized_current_version:
        state = "OK"
        message = (
            f"{SERVICE} {state} - {config['type']}:{config['model']} "
            f"firmware version {installed_version} "
            f"is current"
        )
    else:
        state = "WARNING"
        message = (
            f"{SERVICE} {state} - {config['type']}:{config['model']} "
            f"firmware version {installed_version} "
            f"differs from the latest available {normalized_current_version}"
        )

    return state, message


def unifi_ap_model_autodiscover(config):
    """Get UniFi AP model via SNMP"""
    oid = ObjectType(ObjectIdentity("UBNT-UniFi-MIB", "unifiApSystemModel", 0))
    dataset = get_snmp_oids(config, SERVICE, oid)
    return dataset["unifiApSystemModel"]


def unifi_switch_model_autodiscover(config):
    """Get UniFi switch model via SNMP"""
    oid = ObjectType(
        ObjectIdentity("EdgeSwitch-SWITCHING-MIB", "agentInventoryMachineModel", 0)
    )
    dataset = get_snmp_oids(config, SERVICE, oid)
    return dataset["agentInventoryMachineModel"]


def unifi_edgeos_model_autodiscover(config):
    """Get UniFi USG model via SNMP"""
    unknown_exit(SERVICE, "UBNT EdgeOS router model autodiscover not supported")


def fetch_unifi_ap_version(config):
    """Get installed UniFi AP system version via SNMP"""
    oid = ObjectType(ObjectIdentity("UBNT-UniFi-MIB", "unifiApSystemVersion", 0))
    dataset = get_snmp_oids(config, SERVICE, oid)
    return dataset["unifiApSystemVersion"]


def fetch_unifi_switch_version(config):
    """Get installed UniFi switch system version via SNMP"""
    oid = ObjectType(
        ObjectIdentity("EdgeSwitch-SWITCHING-MIB", "agentInventorySoftwareVersion", 0)
    )
    dataset = get_snmp_oids(config, SERVICE, oid)
    return dataset["agentInventorySoftwareVersion"]


def fetch_unifi_usg_version(config):
    """Get installed UniFi USG system version via SNMP"""
    oid = ObjectType(ObjectIdentity("SNMPv2-MIB", "sysDescr", 0))
    dataset = get_snmp_oids(config, SERVICE, oid)

    if dataset["sysDescr"].startswith("EdgeOS"):
        version_match = re.search("EdgeOS v(([0-9]+[.]){3}[0-9]+)", dataset["sysDescr"])
        if version_match:
            installed_version = version_match.group(1)
        else:
            raise ValueError("Unable to find EdgeOS version in sysDescr")
    else:
        raise ValueError("Unknown sysDescr string")

    return installed_version


def main():
    """Parse args and execute script logic"""
    parser = argparse.ArgumentParser(
        description=__doc__, formatter_class=argparse.RawDescriptionHelpFormatter
    )
    add_common_snmp_args(parser)
    parser.add_argument(
        "-t",
        "--type",
        required=True,
        help="UBNT device type",
        choices=["UniFiSwitch", "UniFiAP", "UniFiUSG"],
    )
    parser.add_argument(
        "-m",
        "--model",
        help="UBNT device model. Required for EdgeRouter and UniFiUSG",
    )
    config = vars(parser.parse_args())
    check_snmp_args(config)

    if config.get("type") == "UniFiSwitch":
        if not config.get("model"):
            config["model"] = unifi_switch_model_autodiscover(config)
        installed_version = fetch_unifi_switch_version(config)
    elif config.get("type") in ["EdgeRouter", "UniFiUSG"]:
        if not config.get("model"):
            config["model"] = unifi_edgeos_model_autodiscover(config)
        installed_version = fetch_unifi_usg_version(config)
    elif config.get("type") == "UniFiAP":
        if not config.get("model"):
            config["model"] = unifi_ap_model_autodiscover(config)
        installed_version = fetch_unifi_ap_version(config)

    raw_latest_version = fetch_latest_ubnt_version(config["model"])
    normalized_latest_version = normalize_ubnt_version(raw_latest_version)
    state, message = generate_ubnt_update_output(
        config, installed_version, normalized_latest_version
    )
    report(state, message)


if __name__ == "__main__":
    main()
