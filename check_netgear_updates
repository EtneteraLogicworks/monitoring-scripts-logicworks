#!/usr/bin/env python3
"""check_netgear_updates

Script checks if Netgear switch device firmware is up to date.
Installed firmware version is retrieved via SNMPv3 using pysnmp library.
Latest available firmware version is retrieved from Netgear website
"""

import argparse

import requests
from lxml import etree
from pysnmp.hlapi import ObjectIdentity, ObjectType

from logicworks_monitoring_lib import (
    add_common_snmp_args,
    add_vars_to_dataset,
    check_snmp_args,
    get_snmp_data,
    report,
    unknown_exit,
)

SERVICE = "Netgear UPDATE"

DOWNLOAD_WEBPAGE = "https://www.netgear.com/support/product/"


def generate_output(dataset):
    """Prepare message string and exit code"""
    if dataset["installed_version"] == dataset["latest_version"]:
        state = "OK"
        message = (
            f"{SERVICE} {state} - Firmware {dataset['installed_version']} is current"
        )
    else:
        state = "WARNING"
        message = (
            f"{SERVICE} {state} - firmware version {dataset['installed_version']} "
            f"differs from the latest available {dataset['latest_version']}"
        )
    return state, message


def find_version_from_web(dataset):
    """Get latest firmware version from the download web page"""
    webpage_url = f"{DOWNLOAD_WEBPAGE}{dataset['model_number']}.aspx"

    try:
        webpage = requests.get(webpage_url).text
    except (requests.exceptions.RequestException, ValueError) as err:
        unknown_exit(SERVICE, err)

    tree = etree.HTML(webpage)
    r = tree.xpath(
        "//div[@class='accordion latest-version']//h1[contains(text(),'Firmware Version')]//text()"
    )
    dataset["latest_version"] = r[0].strip("Firmware Version ")


def main():
    """Parse args and execute script logic"""
    parser = argparse.ArgumentParser(
        description=__doc__, formatter_class=argparse.RawDescriptionHelpFormatter
    )
    parser.add_argument(
        "-m",
        "--model",
        required=True,
        help="Switch model.",
    )
    add_common_snmp_args(parser)

    config = vars(parser.parse_args())
    check_snmp_args(config)

    dataset = {}

    dataset["model_number"] = config["model"]

    # Get version via SNMP
    version_obect = ObjectType(ObjectIdentity("1.3.6.1.4.1.89.2.4.0"))
    raw_data = get_snmp_data(config, version_obect)
    add_vars_to_dataset(dataset, raw_data)
    dataset["installed_version"] = dataset["enterprises"]

    # Get latest version from web
    find_version_from_web(dataset)

    if "latest_version" not in dataset:
        unknown_exit(SERVICE, "Unable to find latest update")

    state, message = generate_output(dataset)
    report(state, message)


if __name__ == "__main__":
    main()
