#!/usr/bin/env python3
"""check_synology_smart

Script checks Synology disk SMART system for problems.
Information is retrieved via SNMPv3 using pysnmp library.
"""

import argparse

from pysnmp.hlapi import ObjectIdentity, ObjectType

from logicworks_monitoring_lib import (
    add_common_snmp_args,
    add_table_to_dataset,
    check_snmp_args,
    get_snmp_table_data,
    report,
    unknown_exit,
)

SERVICE = "SYNOLOGY SMART"


def add_performace_data(dataset):
    """Add perfdata to message string"""
    message = " |"
    for attribute in dataset:
        if "temperature" in attribute["diskSMARTAttrName"].lower():
            continue
        message += (
            f" '{attribute['diskSMARTAttrName']}'"
            f"={attribute['diskSMARTAttrCurrent']};;;;"
        )
        message += (
            f" '{attribute['diskSMARTAttrName']} (raw)'"
            f"={attribute['diskSMARTAttrRaw']};;;;"
        )
    return message


def generate_output(config, dataset):
    """Prepare message string and exit code"""
    state = "OK"
    message = ""

    for attribute in dataset:
        if attribute["diskSMARTAttrStatus"] != "OK":
            state = "CRITICAL"
            message += (
                f"{attribute['diskSMARTAttrName']}: {attribute['diskSMARTAttrStatus']} "
            )

    if state == "OK":
        message += f"No problems found on disk {config['device']}"
    else:
        message += f"SMART problems detected on disk {config['device']}"

    message = f"{SERVICE} {state} - " + message + add_performace_data(dataset)
    return state, message


def main():
    """Parse args and execute script logic"""
    parser = argparse.ArgumentParser(
        description=__doc__, formatter_class=argparse.RawDescriptionHelpFormatter
    )
    add_common_snmp_args(parser)
    parser.add_argument(
        "-d", "--device", help="DEV device path",
    )

    config = vars(parser.parse_args())
    check_snmp_args(config)

    dataset = []

    dev_name = ObjectType(ObjectIdentity("SYNOLOGY-SMART-MIB", "diskSMARTInfoDevName"))
    attribute_name = ObjectType(
        ObjectIdentity("SYNOLOGY-SMART-MIB", "diskSMARTAttrName")
    )
    attribute_value = ObjectType(
        ObjectIdentity("SYNOLOGY-SMART-MIB", "diskSMARTAttrCurrent")
    )
    attribute_value_raw = ObjectType(
        ObjectIdentity("SYNOLOGY-SMART-MIB", "diskSMARTAttrRaw")
    )
    attribute_status = ObjectType(
        ObjectIdentity("SYNOLOGY-SMART-MIB", "diskSMARTAttrStatus")
    )

    try:
        raw_data = get_snmp_table_data(
            config,
            dev_name,
            attribute_name,
            attribute_value,
            attribute_value_raw,
            attribute_status,
        )
    except ValueError as err:
        unknown_exit(SERVICE, err)

    add_table_to_dataset(dataset, raw_data)

    smart_dataset = []
    for item in dataset:
        if item["diskSMARTInfoDevName"] == config["device"]:
            smart_dataset.append(item)

    state, message = generate_output(config, smart_dataset)
    report(state, message)


if __name__ == "__main__":
    main()
