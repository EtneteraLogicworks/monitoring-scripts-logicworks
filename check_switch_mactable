#!/usr/bin/env python3
"""check_switch_mactable

Script checks switch MAC table number of record.
Information is retrieved via SNMPv3 using pysnmp library.
"""

import argparse

from pysnmp.hlapi import ObjectIdentity, ObjectType

from logicworks_monitoring_lib import (
    add_common_snmp_args,
    add_vars_to_dataset,
    check_snmp_args,
    get_snmp_data,
    report,
    unknown_exit,
)

SERVICE = "SWITCH MAC TABLE"


def add_performace_data(config, dataset):
    """Add perfdata to message string"""
    message = (
        f" | 'adresses'={dataset['number_of_records']}"
        f";{config['warning'] or ''};{config['critical'] or ''};0;"
    )
    return message


def generate_output(config, dataset):
    """Prepare message string and exit code"""
    state = "OK"

    if config["critical"] and dataset["number_of_records"] > config["critical"]:
        state = "CRITICAL"
    elif config["warning"] and dataset["number_of_records"] > config["warning"]:
        state = "WARNING"

    message = f"{SERVICE} {state} - {dataset['number_of_records']} MAC adresses"

    message = message + add_performace_data(config, dataset)
    return state, message


def main():
    """Parse args and execute script logic"""
    parser = argparse.ArgumentParser(
        description=__doc__, formatter_class=argparse.RawDescriptionHelpFormatter
    )
    add_common_snmp_args(parser)
    parser.add_argument(
        "-w", "--warning", type=int, help="Warning number of records in MAC table",
    )
    parser.add_argument(
        "-c", "--critical", type=int, help="Critical number of records in MAC table",
    )
    parser.add_argument(
        "-f",
        "--family",
        required=True,
        help="Switch family. Supported families: 1910, 1920",
    )

    config = vars(parser.parse_args())
    check_snmp_args(config)
    dataset = {}

    if config["family"] in ["1910", "1920"]:
        cpu = ObjectType(
            ObjectIdentity("HH3C-ENTITY-EXT-MIB", "hh3cEntityExtMacAddressCount", 1)
        )
    else:
        unknown_exit(SERVICE, f"Switch family {config['family']} NOT known")

    try:
        raw_data = get_snmp_data(config, cpu)
    except ValueError as err:
        unknown_exit(SERVICE, err)
    add_vars_to_dataset(dataset, raw_data)

    if config["family"] in ["1910", "1920"]:
        dataset["number_of_records"] = int(dataset["hh3cEntityExtMacAddressCount"])
    else:
        unknown_exit(SERVICE, f"Switch family {config['family']} NOT known")

    state, message = generate_output(config, dataset)
    report(state, message)


if __name__ == "__main__":
    main()
