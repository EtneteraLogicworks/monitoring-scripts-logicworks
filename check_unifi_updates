#!/usr/bin/env python3
"""check_unifi_updates

Script checks if UniFi device firmware is up to date.
Installed firmware version is retrieved via SNMPv3 using pysnmp library.
Latest available firmware version is retrieved via ubnt.com API (See UNIFI_RELEASES_URL)
"""

import argparse

from pysnmp.hlapi import ObjectIdentity, ObjectType

from logicworks_monitoring_lib import (
    add_common_snmp_args,
    add_vars_to_dataset,
    check_snmp_args,
    get_snmp_data,
    report,
    unknown_exit,
)
from logicworks_ubnt_lib import (
    fetch_latest_ubnt_version,
    generate_ubnt_update_output,
    normalize_ubnt_version,
)

SERVICE = "UNIFI UPDATE"


def main():
    """Parse args and execute script logic"""
    parser = argparse.ArgumentParser(
        description=__doc__, formatter_class=argparse.RawDescriptionHelpFormatter
    )
    add_common_snmp_args(parser)

    config = vars(parser.parse_args())
    check_snmp_args(config)

    dataset = {}

    unifi_model = ObjectType(ObjectIdentity("UBNT-UniFi-MIB", "unifiApSystemModel", 0))
    unifi_version = ObjectType(
        ObjectIdentity("UBNT-UniFi-MIB", "unifiApSystemVersion", 0)
    )

    try:
        raw_data = get_snmp_data(config, unifi_model, unifi_version)
    except ValueError as err:
        unknown_exit(SERVICE, err)
    add_vars_to_dataset(dataset, raw_data, "unifi")

    installed_version = dataset["unifiApSystemVersion"]
    raw_latest_version = fetch_latest_ubnt_version(
        dataset["unifiApSystemModel"], SERVICE
    )
    normalized_latest_version = normalize_ubnt_version(raw_latest_version)
    state, message = generate_ubnt_update_output(
        installed_version, normalized_latest_version, SERVICE
    )
    report(state, message)


if __name__ == "__main__":
    main()
