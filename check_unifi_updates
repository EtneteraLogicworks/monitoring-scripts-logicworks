#!/usr/bin/env python3
"""check_unifi_updates

Script checks if UniFi device firmware is up to date.
Installed firmware version is retrieved via SNMPv3 using pysnmp library.
Latest available firmware version is retrieved via ubnt.com API (See UNIFI_RELEASES_URL)
"""

import argparse
import re

import requests
from pysnmp.hlapi import ObjectIdentity, ObjectType

from logicworks_monitoring_lib import (
    add_common_snmp_args,
    add_vars_to_dataset,
    check_snmp_args,
    get_snmp_data,
    report,
    unknown_exit,
)

SERVICE = "UNIFI UPDATE"

UNIFI_RELEASES_URL = "https://fw-update.ubnt.com/api/firmware-latest"
UNIFI_IDENTIFIERS = {
    "UAP-AC-EDU": "U7PG2",
    "UAP–AC–IW": "U7PG2",
    "UAP–AC–IW–PRO": "U7PG2",
    "UAP-AC-LITE": "U7PG2",
    "UAP-AC-LR": "U7PG2",
    "UAP-AC-M": "U7PG2",
    "UAP-AC-M-PRO": "U7PG2",
    "UAP-AC-PRO": "U7PG2",
    "UAP-AC-PRO-GEN2": "U7PG2",
    "UA-FLEXHD": "U7NHD",
    "UAP-BEACONHD": "U7NHD",
    "UAP-IW-HD": "U7NHD",
    "UAP-NANOHD": "U7NHD",
    "UAP-IW": "U2IW",
    "UAP-OUTDOOR+": "U2HSR",
    "UAP-HD": "U7HD",
    "UAP-SHD": "U7HD",
    "UAP‑XG": "U7HD",
    "UWB‑XG": "U7HD",
    "UWB‑XG‑BK": "U7HD",
    "UAP": "BZ2",
    "UAP-LR": "BZ2",
    "UAP-OUTDOOR": "BZ2",
    "UAP-OUTDOOR5": "BZ2",
    "UAP-V2": "U2SV2",
    "UAP-LR-V2": "U2SV2",
    "UAP-PRO": "U7P",
}


def normalize_version(raw_version):
    """Strip unwanted characters from the retrieved version"""
    version_string = re.sub("[a-zA-Z]", "", raw_version)
    version_string = version_string.replace("+", ".")
    return version_string


def fetch_latest_version(unifi_model):
    """Obtain latest available firmware version for the device from the UBNT API"""
    try:
        req = requests.get(UNIFI_RELEASES_URL)
        list_of_devices = req.json()["_embedded"]["firmware"]
    except (requests.exceptions.RequestException, ValueError) as err:
        unknown_exit(SERVICE, err)

    my_device = UNIFI_IDENTIFIERS.get(unifi_model.upper(), None)
    if my_device is None:
        unknown_exit(SERVICE, f"Unknown device model: {unifi_model}")

    device_item = next(
        (
            device
            for device in list_of_devices
            if device["channel"] == "release" and device["platform"] == my_device
        ),
        None,
    )
    if device_item is None:
        unknown_exit(SERVICE, f"Unable to find updates for device: {unifi_model}")
    return device_item["version"]


def generate_output(installed_version, normalized_current_version):
    """Prepare message string and exit code"""
    if installed_version == normalized_current_version:
        state = "OK"
        message = f"{SERVICE} {state} - Firmware {installed_version} is current"
    else:
        state = "WARNING"
        message = (
            f"{SERVICE} {state} - firmware version {installed_version} "
            f"differs from the latest available {normalized_current_version}"
        )

    return state, message


def main():
    """Parse args and execute script logic"""
    parser = argparse.ArgumentParser(
        description=__doc__, formatter_class=argparse.RawDescriptionHelpFormatter
    )
    add_common_snmp_args(parser)

    config = vars(parser.parse_args())
    check_snmp_args(config)

    dataset = {}

    unifi_model = ObjectType(ObjectIdentity("UBNT-UniFi-MIB", "unifiApSystemModel", 0))
    unifi_version = ObjectType(
        ObjectIdentity("UBNT-UniFi-MIB", "unifiApSystemVersion", 0)
    )

    try:
        raw_data = get_snmp_data(config, unifi_model, unifi_version)
    except ValueError as err:
        unknown_exit(SERVICE, err)
    add_vars_to_dataset(dataset, raw_data, "unifi")

    installed_version = dataset["unifiApSystemVersion"]
    raw_latest_version = fetch_latest_version(dataset["unifiApSystemModel"])
    normalized_latest_version = normalize_version(raw_latest_version)
    state, message = generate_output(installed_version, normalized_latest_version)
    report(state, message)


if __name__ == "__main__":
    main()
